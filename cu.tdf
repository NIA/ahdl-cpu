INCLUDE "const.inc";
% instruction codes %
CONSTANT COP_NOP = H"00";
CONSTANT COP_HLT = H"01";

CONSTANT COP_LDA = H"10";
CONSTANT COP_STA = H"20";

CONSTANT COP_JMP = H"30";

CONSTANT COP_ALU = H"4"; -- code of arithmetic operation command
                          -- is (COP_ALU , operation code )
CONSTANT COP_ADD = COP_ALU * H"10" + OP_ADD ;
CONSTANT COP_SUB = COP_ALU * H"10" + OP_SUB ;
CONSTANT COP_MUL = COP_ALU * H"10" + OP_MUL ;
CONSTANT COP_CMP = COP_ALU * H"10" + OP_CMP ;
                                    
CONSTANT COP_SLA = COP_ALU * H"10" + OP_SLA ;
CONSTANT COP_SRA = COP_ALU * H"10" + OP_SRA ;
CONSTANT COP_SLAX= COP_ALU * H"10" + OP_SLAX;
CONSTANT COP_SRAX= COP_ALU * H"10" + OP_SRAX;

SUBDESIGN CU
(
  CLK,
  COP[7..0]     % code of operation in IR %
    : INPUT;
  
  ip_ena,       % do increment ip %
  ip_mode_inc,  % inc or reset %
  ip_ab_ena,    % enable write to address bus %

  ram_write,    % ram mode %
  ram_db_ena,   % enable write to data bus %

  ir_ena,       % latch current instr. into ir %
  ir_ab_ena,    % enable write to address bus %

  a_ena,        % load from data bus to accum. regiser %
  a_db_ena,     % enable write to data bus %

  alu_ena,      % do operation in ALU %
  alu_db_ena    % enable write to data bus %
    : OUTPUT;
)

VARIABLE
  state : MACHINE
    WITH STATES
    (
      % cycle %
      IP_TO_RAM_ADDR,
      RAM_SET_IA,
      RAM_I_TO_IR,
      PROCESS,
      IP_SET_INC,
      
      % different command cases %
      LDA,
        LDA_SET_RAM,  % wait until memory loads %
        LDA_LOAD,
        
      STA,
        STA_SET_RAM,  % probably unnecessary - memory can work
                        while next state, not while this one %
      JMP,
        JMP_SET_IP,   % seting value from AB into IP %

      ALU,  % all operations with ALU %
        ALU_SET_RAM,
        ALU_DO,
        ALU_TO_A,

      % idle %
      IDLE
    );

BEGIN
  DEFAULTS
    ip_ena = GND;
    ir_ena = GND;
    a_ena = GND;

    ip_ab_ena = VCC;  % most time ip has access to AB %
    ir_ab_ena = GND;  %    -- // -- %
    
    ram_db_ena = VCC; % most time ram has access to DB %
    a_db_ena = GND;   %    -- // -- %
    alu_db_ena = GND; %    -- // -- %

    ram_write = GND;  % most time reading %
  
    ip_mode_inc = VCC;  % usually incrementing, not setting from AB %
  END DEFAULTS;

  state.clk = CLK;
  state.(reset, ENA) = (GND, VCC);


  CASE state IS
    % cycle %
    WHEN IP_TO_RAM_ADDR =>
      state = RAM_SET_IA;

    WHEN RAM_SET_IA =>
      state = RAM_I_TO_IR;

    WHEN RAM_I_TO_IR =>
      ir_ena = VCC;
      state = PROCESS;

    WHEN PROCESS =>
      % next state depends on COP %
      CASE COP[] IS
        WHEN COP_NOP =>
          state = IP_SET_INC;
        WHEN COP_HLT =>
          state = IDLE;
        WHEN COP_LDA =>
          state = LDA;
        WHEN COP_STA =>
          state = STA;
        WHEN COP_JMP =>
          state = JMP;
        WHEN (COP_ALU, X,X,X,X) =>
          state = ALU;
        WHEN OTHERS =>
          state = IDLE;
      END CASE;

    WHEN IP_SET_INC =>
      ip_ena = VCC;
      state = IP_TO_RAM_ADDR;

    % different command cases %
    WHEN LDA =>
      ip_ab_ena = GND;
      ir_ab_ena = VCC;
      state = LDA_SET_RAM;
    WHEN LDA_SET_RAM =>
      ip_ab_ena = GND;
      ir_ab_ena = VCC;
      state = LDA_LOAD;
    WHEN LDA_LOAD =>
      a_ena = VCC;
      state = IP_SET_INC;

    WHEN STA =>
      ip_ab_ena = GND;
      ir_ab_ena = VCC;

      ram_db_ena = GND;
      a_db_ena = VCC;

      ram_write = VCC;
      state = STA_SET_RAM;
    WHEN STA_SET_RAM =>
      ip_ab_ena = GND;
      ir_ab_ena = VCC;

      ram_db_ena = GND;
      a_db_ena = VCC;

      state = IP_SET_INC;
      
    WHEN JMP =>
      ip_ab_ena = GND;
      ir_ab_ena = VCC;
      state = JMP_SET_IP;
    WHEN JMP_SET_IP =>
      ip_ab_ena = GND;
      ir_ab_ena = VCC;
      ip_mode_inc = GND;
      ip_ena = VCC;
      state = IP_TO_RAM_ADDR;

    WHEN ALU =>
      ip_ab_ena = GND;
      ir_ab_ena = VCC;
      state = ALU_SET_RAM;
    WHEN ALU_SET_RAM =>
      ip_ab_ena = GND;
      ir_ab_ena = VCC;
      state = ALU_DO;
    WHEN ALU_DO =>
      ip_ab_ena = GND; % ? %
      ir_ab_ena = VCC;

      alu_ena = VCC;
      state = ALU_TO_A;
    WHEN ALU_TO_A =>
      alu_ena = VCC;

      ram_db_ena = GND;
      alu_db_ena = VCC;
      
      a_ena = VCC;
      state = IP_SET_INC;

    % idle %
    WHEN OTHERS =>
      state = IDLE;
  END CASE;

END;


