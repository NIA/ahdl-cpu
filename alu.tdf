INCLUDE "const.inc";
include "lpm_add_sub.inc";
include "lpm_compare.inc";
include "lpm_clshift.inc";

SUBDESIGN ALU
(
  CLK,
  ENA,
  OP  [3..0],   % code of arithmetic operation %
  DataIn[15..0],
  ParameterIn[7..0],

  % registers %
  rA[15..0]
    : INPUT;
  
  DataOut[15..0],
  Ovfl,

  Equal,
  Less,
  Greater,

  debug_greater,
  debug_less
    : OUTPUT;
)
VARIABLE
  add_sub : lpm_add_sub WITH
  (
    LPM_WIDTH = 16,
    LPM_PIPELINE = 1
  );

  compare : lpm_compare WITH
  (
    LPM_WIDTH = 16,
    LPM_PIPELINE = 0
  );

  small_shift : lpm_clshift WITH
  (
    LPM_WIDTH = 16,
    LPM_WIDTHDIST = 4
  );

  EqualTrig   : DFFE;
  LessTrig    : DFFE;
  GreaterTrig : DFFE;

  LogicResult[15..0] : DFFE;
  CompareInput[15..0]: DFFE;

BEGIN
  DEFAULTS
    add_sub.clken = GND;
    add_sub.add_sub = VCC;
    Ovfl = GND;

    LogicResult[].d = GND;

    (EqualTrig, LessTrig, GreaterTrig).ENA = GND;
  END DEFAULTS;

  add_sub.clock = CLK;
  add_sub.dataa[] = rA[];
  add_sub.datab[] = DataIn[];

  CompareInput[].CLK = CLK;
  CompareInput[].ENA = ENA;
  CompareInput[].d = DataIn[];
  
  compare.dataa[] = rA[];
  compare.datab[] = CompareInput[];

  small_shift.data[] = rA[];
  small_shift.distance[] = ParameterIn[3..0];
  
  LogicResult[].CLK = CLK;
  LogicResult[].ENA = ENA;

  (EqualTrig, LessTrig, GreaterTrig).CLK = CLK;
  EqualTrig.d = compare.aeb;
  LessTrig.d = compare.alb;
  GreaterTrig.d = compare.agb;
  debug_greater = compare.agb;
  debug_less = compare.alb;
  Equal = EqualTrig.q;
  Less = LessTrig.q;
  Greater = GreaterTrig.q;

  IF ENA THEN
    CASE OP[] IS
      WHEN OP_ADD =>
        add_sub.clken = VCC;
        add_sub.add_sub = VCC;
        DataOut[] = add_sub.result[];
        Ovfl = add_sub.overflow;
      WHEN OP_SUB =>
        add_sub.clken = VCC;
        add_sub.add_sub = GND;
        DataOut[] = add_sub.result[];
        Ovfl = add_sub.overflow;
      WHEN OP_AND =>
        LogicResult[].d = DataIn[] & rA[];
        DataOut[] = LogicResult[];
      WHEN OP_OR =>
        LogicResult[].d = DataIn[] # rA[];
        DataOut[] = LogicResult[];
      WHEN OP_CMP =>
        (EqualTrig, LessTrig, GreaterTrig).ENA = VCC;
        DataOut[] = CompareInput[];
      WHEN OP_SLA =>
        small_shift.direction = GND;
        DataOut[] = small_shift.result[];
      WHEN OP_SRA =>
        small_shift.direction = VCC;
        DataOut[] = small_shift.result[];
    END CASE;
  END IF;
END;
