INCLUDE "const.inc";
include "lpm_add_sub.inc";

SUBDESIGN ALU
(
  CLK,
  ENA,
  OP  [3..0],   % code of arithmetic operation %
  DataIn[15..0],

  % registers %
  rA[15..0]
    : INPUT;
  
  DataOut[15..0],
  Ovfl
    : OUTPUT;
)
VARIABLE
  add_sub : lpm_add_sub WITH
  (
    LPM_WIDTH = 16,
    LPM_PIPELINE = 1
  );

  LogicResult[15..0] : DFFE;
BEGIN
  DEFAULTS
    add_sub.clken = GND;
    add_sub.add_sub = VCC;
    Ovfl = GND;
    LogicResult[].d = GND;
  END DEFAULTS;

  add_sub.clock = CLK;
  add_sub.dataa[] = rA[];
  add_sub.datab[] = DataIn[];
  
  LogicResult[].CLK = CLK;
  LogicResult[].ENA = ENA;
  
  IF ENA THEN
    CASE OP[] IS
      WHEN OP_ADD =>
        add_sub.clken = VCC;
        add_sub.add_sub = VCC;
        DataOut[] = add_sub.result[];
        Ovfl = add_sub.overflow;
      WHEN OP_SUB =>
        add_sub.clken = VCC;
        add_sub.add_sub = GND;
        DataOut[] = add_sub.result[];
        Ovfl = add_sub.overflow;
      WHEN OP_AND =>
        LogicResult[].d = DataIn[] & rA[];
        DataOut[] = LogicResult[];
      WHEN OP_OR =>
        LogicResult[].d = DataIn[] # rA[];
        DataOut[] = LogicResult[];
    END CASE;
  END IF;
END;
